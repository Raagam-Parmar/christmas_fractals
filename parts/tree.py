# this tree is a customised version of the "Barnsley Fern"  (see: https://www.wikiwand.com/en/articles/Barnsley_fern)
# the parameters of the tree-fractal were generated by me (Raagam Hitesh Parmar).

import pygame
import os
import random

# some constant colors
GREEN_A = (46, 181, 31)
GREEN_B = (22, 107, 9)
DARK_GREEN = (20, 65, 10)

# image dimensions
WIDTH = 5_000
HEIGHT = 5_000

# initialize pygame
pygame.init()

# transparent surface with required dimensions
background = pygame.Surface((WIDTH, HEIGHT), pygame.SRCALPHA)
background.fill((0, 0, 0, 0))

def map_to_screen(x: float, y: float):
    """
    `map_to_screen x y` takes the mathematical coordinates of the tree-fractal and turns them into pygame-friendly corrdinates for the image.
    """
    scale_x = WIDTH / 2.6
    scale_y = HEIGHT / 2.6
    screen_x = int(WIDTH / 2 + x * scale_x)
    screen_y = int(HEIGHT - y * scale_y)
    return screen_x, screen_y

def tree(surface: pygame.surface, points: int, color: list[int]):
    """
    `tree s p c` draws a fern-like tree-fractal on the surface `s`, with `p` many points of color `c`.
    """
    # initial starting points
    x, y = 0, 0

    # next-generation points
    x_n = 0
    y_n = 0

    for _ in range(points):
        # generate a random probability
        r = random.random()

        # there is 5% chance to generate the stem
        # 84% chance to generate the self-similar structure up the trunk of the tree
        # 5.5% chance each to generate the largest left and right branch of the tree
        if r < 0.05:
            x_n = 0.0
            y_n = y
        elif r < 0.89:
            x_n = 0.8 * x
            y_n = 0.8 * y + 0.5
        elif r < 0.945:
            x_n = 0.25 * y - 0.03
            y_n = -0.25 * x + 0.167 * y + 0.25
        else:
            x_n = -0.24 * y + 0.03
            y_n = 0.25 * x + 0.113 * y + 0.5

        # cycle the points
        x, y = x_n, y_n
        # convert the mathematical points into screen points
        screen_x, screen_y = map_to_screen(x, y)

        # draw the point on the surface
        surface.set_at((screen_x, screen_y), color)

# draw the trees in green color
tree(background, 5_000_000, DARK_GREEN)

# save the star as a transparent image
output_path = os.path.join(os.getcwd(), 'images/tree.png')
pygame.image.save(background, output_path)

print(f"Tree PNG saved at: {output_path}")

# quit pygame
pygame.quit()
